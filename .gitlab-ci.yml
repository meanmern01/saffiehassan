# На сервере:
# 1. ssh-keygen
# 2. Копировать приватный ключ, положить в переменную PRODUCTION_PRIVATE_KEY в gitlab
# 3. Копировать публичный ключ (~/.ssh/<KEY_NAME>.pub), добавить в ~/.ssh/authorized_keys на сервере
# 4. Добавить в переменную SSH_KNOWN_HOSTS в gitlab (ssh-keyscan -H <SERVER IP>)
# 5. Клонировать репозиторий проекта на удаленный сервер (этот путь будет $PROJECT_PATH)
# 6. Настроить права на сервере:
## chown -R chipsa:chipsa #PATH#
## find #PATH# -type d -exec chmod 775 {} \;
## find #PATH# -type f -exec chmod 664 {} \;
## где #PATH# - путь до проекта (ниже в конфиге $PROJECT_PATH)
# 7. Если на этапе фронтенда html будет лежать не в папке build, не забыть добавить в этап build_frontend в artifacts - #html_path#

image: alpine

# Глобальные переменные
variables: &global_variables
    GIT_DEPTH: 5
    IMAGE_FRONTEND: node:16-alpine
    FRONTEND_PATH: '.'
    SSH_PORT: 22

# Глобальные переменные для дева
variables: &global_variables_dev
    ENV_PRIVATE_KEY: $STAGING_PRIVATE_KEY
    PROJECT_HOST: "chipsa@91.230.210.213"
    PROJECT_PATH: "/var/www/chipsa/data/www/skinstric.chipsa.ru/"
    BRANCH_NAME: dev
    SSH_PORT: 33022

# Глобальные переменные для продакшена
variables: &global_variables_prod
    ENV_PRIVATE_KEY: $PRODUCTION_PRIVATE_KEY
    PROJECT_HOST: "<<[PROJECT_HOST_HERE]>>"
    PROJECT_PATH: "<<[PROJECT_PATH_HERE]>>"
    BRANCH_NAME: master

.before_script: &before_script
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - echo "$ENV_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

.install_deploy_deps: &install_deploy_deps
    # Проверяем, есть ли rsync, если нет - устанавливаем
    - which rsync || ( apk update && apk add rsync )

.deploy_frontend: &deploy_frontend
    # Создаем временные папки
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_tmp && mkdir -p -m 775 $PROJECT_PATH/$FRONTEND_PATH/_tmp"
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_old && mkdir -p -m 775 $PROJECT_PATH/$FRONTEND_PATH/_old"
    # Создаем папку .next, если она не существует
    - ssh -p $SSH_PORT $PROJECT_HOST "mkdir -p -m 775 $PROJECT_PATH/$FRONTEND_PATH/.next"
    # Копируем билд фронтенда с сервера gitlab ci
    - rsync -zarvh -av -e "ssh -p $SSH_PORT" $FRONTEND_PATH/.next $PROJECT_HOST:$PROJECT_PATH/$FRONTEND_PATH/_tmp
    # Меняем старый и новый билды фронтенда местами
    - ssh -p $SSH_PORT $PROJECT_HOST "mv $PROJECT_PATH/$FRONTEND_PATH/.next $PROJECT_PATH/$FRONTEND_PATH/_old && mv $PROJECT_PATH/$FRONTEND_PATH/_tmp/.next $PROJECT_PATH/$FRONTEND_PATH"
    # Удаляем временные папки
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_old"
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_tmp"

.deploy_storybook: &deploy_storybook
    # Создаем временные папки
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/_storybook_tmp && mkdir -p -m 775 $PROJECT_PATH/_storybook_tmp"
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/_storybook_old && mkdir -p -m 775 $PROJECT_PATH/_storybook_old"
    # Создаем папку storybook, если она не существует
    - ssh -p $SSH_PORT $PROJECT_HOST "mkdir -p -m 775 $PROJECT_PATH/public/storybook"
    # Копируем билд storybook с сервера gitlab ci
    - rsync -zarvh -av -e "ssh -p $SSH_PORT" public/storybook $PROJECT_HOST:$PROJECT_PATH/_storybook_tmp
    # Меняем старый и новый билды storybook местами
    - ssh -p $SSH_PORT $PROJECT_HOST "mv $PROJECT_PATH/public/storybook $PROJECT_PATH/_storybook_old && mv $PROJECT_PATH/_storybook_tmp/storybook $PROJECT_PATH/public"
    # Удаляем временные папки
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/_storybook_old"
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/_storybook_tmp"

.pull_repo: &pull_repo
    # Пуллим изменения из репозитория
    - ssh -p $SSH_PORT $PROJECT_HOST "cd $PROJECT_PATH/ && git checkout $BRANCH_NAME && git pull --force origin $BRANCH_NAME"

.restart_pm2: &restart_pm2
    - ssh -p $SSH_PORT $PROJECT_HOST "cd $PROJECT_PATH/ && sudo /bin/pm2restartskinstric"

.cache: &global_cache
    key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
    paths:
        - $FRONTEND_PATH/node_modules/
    policy: pull-push

stages:
    - install_dependencies
    - build
    - deploy
    - deploy_after

# Jobs

install_dependencies_frontend:
    image: $IMAGE_FRONTEND
    stage: install_dependencies
    variables:
        <<: *global_variables
    only:
        refs:
            - dev
            # - master
        changes:
            - package-lock.json
    cache:
        <<: *global_cache
        policy: push
    script:
        - cd $FRONTEND_PATH/
        - npm ci -f

build_frontend:
    image: $IMAGE_FRONTEND
    stage: build
    variables:
        <<: *global_variables
    cache:
        <<: *global_cache
        policy: pull
    artifacts:
        paths:
            - $FRONTEND_PATH/.next/
        expire_in: 1 week
    only:
        refs:
            - dev
            # - master
    script:
        - cd $FRONTEND_PATH/
        # - npm test
        - npm run build

# build_storybook:
#     image: $IMAGE_FRONTEND
#     stage: build
#     variables:
#         <<: *global_variables
#     only:
#         refs:
#             - dev
#             # - master
#         # changes:
#         #     - .storybook
#         #     - components/**/*
#         #     - package-lock.json
#     cache:
#         <<: *global_cache
#         policy: pull
#     script:
#         - cd $FRONTEND_PATH/
#         - npm run build-storybook
#     artifacts:
#         paths:
#             - public/storybook/
#         expire_in: 1 week

deploy_frontend_dev:
    stage: deploy
    variables:
        <<: *global_variables
        <<: *global_variables_dev
    dependencies:
        - build_frontend
    needs: ["build_frontend"]
    only:
        refs:
            - dev
    cache: []
    before_script:
        - *before_script
    script:
        - *install_deploy_deps
        - *deploy_frontend
        - *pull_repo
        # - *restart_pm2

# deploy_storybook_dev:
#     stage: deploy
#     variables:
#         <<: *global_variables
#         <<: *global_variables_dev
#     dependencies:
#         - build_storybook
#     needs: ["build_storybook"]
#     only:
#         refs:
#             - dev
#         # changes:
#         #     - .storybook
#         #     - components/**/*
#         #     - package-lock.json
#     cache: []
#     before_script:
#         - *before_script
#     script:
#         - *install_deploy_deps
#         - *deploy_storybook

# pull_dev:
#     stage: deploy_after
#     variables:
#         <<: *global_variables
#         <<: *global_variables_dev
#     only:
#         refs:
#             - dev
#     cache: []
#     before_script:
#         - *before_script
#     script:
#         - *pull_repo
